name: Revert Commit After Sync

on:
  workflow_run:
    workflows: ["Sync FrogPilot-Staging"]
    types:
      - completed
  workflow_dispatch:

jobs:
  revert-commit:
    runs-on: ubuntu-latest
    steps:
      - name: Configure Git to skip symlinks
        run: git config --global core.symlinks false
        
      - name: Checkout repo without symlinks
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensure you fetch all history for commits, tags, etc
          persist-credentials: false

      - name: Setup Git Config
        run: |
          git config --global user.email "55640145+BRid37@users.noreply.github.com"
          git config --global user.name "BRid37"

      - name: Ensure clean state and fetch all branches
        run: |
          git fetch --all
          git checkout -b temp-branch origin/fp-FrogPilot-Staging
          git reset --hard origin/fp-FrogPilot-Staging
          git clean -fdx

      - name: Find compile commit
        id: find-compile-commit
        run: |
          # Find the commit hash for the "Compile FrogPilot" commit
          compile_commit=$(git log --oneline --first-parent --grep "Compile FrogPilot" | head -n 1 | cut -d " " -f 1)
          if [ -z "$compile_commit" ]; then
            echo "Error: Compile commit not found."
            exit 1
          fi
          echo "compile_commit=$compile_commit" >> $GITHUB_ENV

      - name: Get all commits after the compile commit
        id: commits-after-compile
        run: |
          compile_commit=${{ env.compile_commit }}
          # List all commits after the compile commit
          commits_after_compile=$(git rev-list $compile_commit..HEAD | tail -n +2 | tac)
          echo "commits_after_compile=$commits_after_compile" >> $GITHUB_ENV

      - name: Revert commits after compile commit
        run: |
          compile_commit=${{ env.compile_commit }}
          commits_after_compile=${{ env.commits_after_compile }}
          
          # Revert all commits after the compile commit
          if [ ! -z "$commits_after_compile" ]; then
            for commit in $commits_after_compile; do
              echo "Reverting commit: $commit"
              git revert --no-edit $commit || git revert --abort
              git add .
              git commit -m "Revert commit: $commit"
            done
          fi

      - name: Revert the compile commit
        run: |
          compile_commit=${{ env.compile_commit }}
          if [ ! -z "$compile_commit" ]; then
            git revert --no-edit $compile_commit
            git add .
            git commit -m "Revert compile commit: $compile_commit"
          else
            echo "No compile commit to revert."
          fi

      - name: Re-apply commits after compile commit
        run: |
          commits_after_compile=${{ env.commits_after_compile }}
          
          # Re-apply all commits that were reverted in the first step
          if [ ! -z "$commits_after_compile" ]; then
            for commit in $commits_after_compile; do
              echo "Re-applying commit: $commit"
              git cherry-pick $commit || git cherry-pick --abort
              git add .
              git commit --allow-empty -m "Re-apply commit: $commit"
            done
          fi

      - name: Cherry-pick commits
        run: |
          cherry_picks=(
            9827d344088aa94657fbf878f605d3066314ac39
            46cecf31253fe5a573c83c09cad5cfd05609f05e
            88aad794038e1d37cf36c1982c8c69d960c19f85
            36000fe61f27231b143ceb37cbafdf563814fbc5
            b3985e337ad68434373b06271eaf3851fe6a53b4
          )
          for commit in "${cherry_picks[@]}"; do
            git cherry-pick $commit || git cherry-pick --abort
            git add .
            git commit --allow-empty -m "Cherry-pick commit: $commit"
          done

      - name: Push changes
        run: |
          git checkout fp-FrogPilot-Staging
          git merge temp-branch
          git push origin fp-FrogPilot-Staging
