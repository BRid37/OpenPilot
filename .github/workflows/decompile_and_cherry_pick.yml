name: Revert Commit After Sync

on:
  workflow_run:
    workflows: ["Sync FrogPilot-Staging"]
    types:
      - completed
  workflow_dispatch:

permissions:
  contents: write
  actions: write

jobs:
  revert-commit:
    runs-on: ubuntu-latest
    steps:
      - name: Configure Git to skip symlinks
        run: git config --global core.symlinks false

      - name: Checkout repo without symlinks
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Git Config
        run: |
          git config --global user.email "55640145+BRid37@users.noreply.github.com"
          git config --global user.name "BRid37"

      - name: Ensure clean state and fetch all branches
        run: |
          git fetch --all
          git checkout -b temp-branch origin/fp-FrogPilot-Staging
          git reset --hard origin/fp-FrogPilot-Staging
          git clean -fdx

      - name: Exclude workflow file from operations if it exists
        run: |
          if [ -f ".github/workflows/auto-cache/action.yaml" ]; then
            git update-index --assume-unchanged .github/workflows/auto-cache/action.yaml
            echo "Excluded .github/workflows/auto-cache/action.yaml from git operations."
          else
            echo "File .github/workflows/auto-cache/action.yaml does not exist. Skipping exclusion."
          fi

      - name: Find compile commit
        id: find-compile-commit
        run: |
          compile_commit=$(git log --oneline --first-parent --grep "Compile FrogPilot" | head -n 1 | cut -d " " -f 1)
          if [ -z "$compile_commit" ]; then
            echo "Error: Compile commit not found."
            exit 1
          fi
          echo "compile_commit=$compile_commit" >> $GITHUB_ENV
          echo "compile_commit=$compile_commit" >> $GITHUB_OUTPUT

      - name: Get all commits after the compile commit
        id: commits-after-compile
        run: |
          compile_commit=${{ env.compile_commit }}
          commits_after_compile=$(git rev-list $compile_commit..HEAD | tail -n +2 | tac)
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$commits_after_compile" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Revert commits after compile commit
        run: |
          commits_after_compile="${{ steps.commits-after-compile.outputs.commits }}"
          IFS=$'\n' read -r -a commit_array <<< "$commits_after_compile"
          for commit in "${commit_array[@]}"; do
            echo "Reverting commit: $commit"
            git revert --no-edit $commit || { 
              echo "Conflict detected while reverting $commit.";
              git revert --abort; 
              exit 1; 
            }
            if [ -f ".github/workflows/auto-cache/action.yaml" ]; then
              git add . ':!.github/workflows/auto-cache/action.yaml'
            else
              git add .
            fi
            git commit -m "Revert commit: $commit"
          done

      - name: Revert the compile commit
        run: |
          compile_commit=${{ env.compile_commit }}
          git revert --no-edit $compile_commit || {
            echo "Conflict detected while reverting $compile_commit.";
            git revert --abort;
            exit 1;
          }
          if [ -f ".github/workflows/auto-cache/action.yaml" ]; then
            git add . ':!.github/workflows/auto-cache/action.yaml'
          else
            git add .
          fi
          git commit -m "Revert compile commit: $compile_commit"

      - name: Re-apply commits after compile commit
        run: |
          commits_after_compile="${{ steps.commits-after-compile.outputs.commits }}"
          IFS=$'\n' read -r -a commit_array <<< "$commits_after_compile"
          for commit in "${commit_array[@]}"; do
            echo "Re-applying commit: $commit"
            git cherry-pick --strategy=recursive -X theirs $commit || {
              echo "Conflict detected while cherry-picking $commit. Resolving using incoming changes."
              if [ -f ".github/workflows/auto-cache/action.yaml" ]; then
                git add -u ':!.github/workflows/auto-cache/action.yaml'
              else
                git add -u
              fi
              git cherry-pick --continue || git cherry-pick --abort
            }
          done

      - name: Cherry-pick additional commits
        run: |
          cherry_picks=(
            575bfcf1da4a83bdd403a2a0de86bebca3c9c459 #HKG Steer Enhancements
            1979871b5712f608f333c456c2ca07caf22ee11e #Faster Auto Tune
            4892a95a590eb170c6cc9dec0724b859969b774c #NNFF-Lite
            017ce5fea371b569ab1fb3ca169087246dade7d2 #Startup Message
            0a84f28d47a526503363bc277ee29569adb7a96b #Stock Icons
            089ba5052f5e749784cc54a8dc158a7bc3225b21 #Fast Boot
            069773bf9b6837fdebe31dbc5fc1a988997c2d10 #Sentry
          )
          failed_cherry_picks=()
          for commit in "${cherry_picks[@]}"; do
            if ! git cherry-pick $commit; then
              echo "Failed to cherry-pick commit: $commit"
              git cherry-pick --abort
              failed_cherry_picks+=("$commit")
            else
              echo "Successfully cherry-picked commit: $commit"
            fi
          done
          
          if [ ${#failed_cherry_picks[@]} -ne 0 ]; then
            echo "The following cherry-picks failed:"
            printf '%s\n' "${failed_cherry_picks[@]}"
            echo "Please review these commits manually."
          else
            echo "All cherry-picks were successful."
          fi

      - name: Push changes
        env:
          PAT: ${{ secrets.PAT }}
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.PAT }}@github.com/${{ github.repository }}
          git push origin temp-branch:fp-FrogPilot-Staging --force
