name: Compile and Push BRid37 opAIO Fork

on:
  push:
    branches: [ bp-BPilot-BANNABLE ]
  pull_request:
    branches: [ bp-BPilot-BANNABLE ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual run'
        required: false
        default: 'Manual trigger'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        repository: BRid37/opAIO
        ref: bp-BPilot-BANNABLE
        fetch-depth: 0

    - name: Set up Docker container
      run: |
        docker run --name build-container -d -v ${{ github.workspace }}:/workspace -w /workspace ubuntu:20.04 tail -f /dev/null

    - name: Install system dependencies
      run: |
        docker exec build-container bash -c "
          export DEBIAN_FRONTEND=noninteractive &&
          ln -fs /usr/share/zoneinfo/Etc/UTC /etc/localtime &&
          apt-get update &&
          apt-get install -y --no-install-recommends \
            tzdata \
            ca-certificates \
            clang \
            cppcheck \
            build-essential \
            gcc-arm-none-eabi \
            liblzma-dev \
            capnproto \
            libcapnp-dev \
            curl \
            libcurl4-openssl-dev \
            git \
            git-lfs \
            ffmpeg \
            libavformat-dev \
            libavcodec-dev \
            libavdevice-dev \
            libavutil-dev \
            libavfilter-dev \
            libbz2-dev \
            libeigen3-dev \
            libffi-dev \
            libglew-dev \
            libgles2-mesa-dev \
            libglfw3-dev \
            libglib2.0-0 \
            libqt5charts5-dev \
            libncurses5-dev \
            libssl-dev \
            libusb-1.0-0-dev \
            libzmq3-dev \
            libsqlite3-dev \
            libsystemd-dev \
            locales \
            opencl-headers \
            ocl-icd-libopencl1 \
            ocl-icd-opencl-dev \
            portaudio19-dev \
            qtmultimedia5-dev \
            qtlocation5-dev \
            qtpositioning5-dev \
            qttools5-dev-tools \
            libqt5svg5-dev \
            libqt5serialbus5-dev \
            libqt5x11extras5-dev \
            libqt5opengl5-dev \
            libavresample-dev \
            qt5-default \
            python3.8 \
            python3.8-venv \
            python3.8-dev \
            casync \
            cmake \
            make \
            clinfo \
            libqt5sql5-sqlite \
            libreadline-dev \
            libdw1 \
            autoconf \
            libtool \
            bzip2 \
            libarchive-dev \
            libncursesw5-dev \
            libportaudio2 \
            locales
        "

    - name: Install Poetry
      run: |
        docker exec build-container bash -c "
          curl -sSL https://install.python-poetry.org | python3 - &&
          echo 'export PATH=/root/.local/bin:$PATH' >> /root/.bashrc &&
          source /root/.bashrc
        "

    - name: Install project dependencies
      run: |
        docker exec build-container bash -c "
          source /root/.bashrc &&
          /root/.local/bin/poetry env use python3.8 &&
          /root/.local/bin/poetry install --no-root
        "

    - name: Set environment variables and directories
      run: |
        docker exec build-container bash -c "
          echo 'COMMA_HOME=/workspace/.comma' >> /root/.bashrc &&
          echo 'PARAMS_PATH=/workspace/.comma/params' >> /root/.bashrc &&
          echo 'FROGPILOT_HOME=/workspace/.frogpilot' >> /root/.bashrc &&
          mkdir -p /workspace/.comma/params &&
          mkdir -p /workspace/.frogpilot &&
          mkdir -p /workspace/.cache &&
          mkdir -p /workspace/.config &&
          mkdir -p /workspace/.local/share &&
          mkdir -p /workspace/.cargo/bin &&
          source /root/.bashrc
        "

    - name: Build opAIO
      run: |
        docker exec build-container bash -c "
          source /root/.bashrc &&
          /root/.local/bin/poetry run scons -j\$(nproc)
        "

    - name: Commit and push compiled files
      run: |
        docker exec build-container bash -c "
          git config --local user.email 'action@github.com' &&
          git config --local user.name 'GitHub Action' &&
          git add . &&
          git commit -m 'Add compiled version [skip ci]' || echo 'No changes to commit' &&
          git push
        "

    - name: Push changes
      uses: ad-m/github-push-action@v0.6.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}

    - name: Clean up Docker container
      if: always()
      run: docker rm -f build-container
